<?php
/**
 * GetDogmaEffectsEffectIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Model;

use \ArrayAccess;
use \Swagger\Client\Eve\ObjectSerializer;

/**
 * GetDogmaEffectsEffectIdOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetDogmaEffectsEffectIdOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_dogma_effects_effect_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pre_expression' => 'int',
        'duration_attribute_id' => 'int',
        'description' => 'string',
        'post_expression' => 'int',
        'published' => 'bool',
        'display_name' => 'string',
        'icon_id' => 'int',
        'modifiers' => '\Swagger\Client\Eve\Model\GetDogmaEffectsEffectIdModifier[]',
        'discharge_attribute_id' => 'int',
        'range_chance' => 'bool',
        'tracking_speed_attribute_id' => 'int',
        'range_attribute_id' => 'int',
        'is_assistance' => 'bool',
        'electronic_chance' => 'bool',
        'disallow_auto_repeat' => 'bool',
        'effect_category' => 'int',
        'falloff_attribute_id' => 'int',
        'name' => 'string',
        'is_warp_safe' => 'bool',
        'effect_id' => 'int',
        'is_offensive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'pre_expression' => 'int32',
        'duration_attribute_id' => 'int32',
        'description' => null,
        'post_expression' => 'int32',
        'published' => null,
        'display_name' => null,
        'icon_id' => 'int32',
        'modifiers' => null,
        'discharge_attribute_id' => 'int32',
        'range_chance' => null,
        'tracking_speed_attribute_id' => 'int32',
        'range_attribute_id' => 'int32',
        'is_assistance' => null,
        'electronic_chance' => null,
        'disallow_auto_repeat' => null,
        'effect_category' => 'int32',
        'falloff_attribute_id' => 'int32',
        'name' => null,
        'is_warp_safe' => null,
        'effect_id' => 'int32',
        'is_offensive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pre_expression' => 'pre_expression',
        'duration_attribute_id' => 'duration_attribute_id',
        'description' => 'description',
        'post_expression' => 'post_expression',
        'published' => 'published',
        'display_name' => 'display_name',
        'icon_id' => 'icon_id',
        'modifiers' => 'modifiers',
        'discharge_attribute_id' => 'discharge_attribute_id',
        'range_chance' => 'range_chance',
        'tracking_speed_attribute_id' => 'tracking_speed_attribute_id',
        'range_attribute_id' => 'range_attribute_id',
        'is_assistance' => 'is_assistance',
        'electronic_chance' => 'electronic_chance',
        'disallow_auto_repeat' => 'disallow_auto_repeat',
        'effect_category' => 'effect_category',
        'falloff_attribute_id' => 'falloff_attribute_id',
        'name' => 'name',
        'is_warp_safe' => 'is_warp_safe',
        'effect_id' => 'effect_id',
        'is_offensive' => 'is_offensive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pre_expression' => 'setPreExpression',
        'duration_attribute_id' => 'setDurationAttributeId',
        'description' => 'setDescription',
        'post_expression' => 'setPostExpression',
        'published' => 'setPublished',
        'display_name' => 'setDisplayName',
        'icon_id' => 'setIconId',
        'modifiers' => 'setModifiers',
        'discharge_attribute_id' => 'setDischargeAttributeId',
        'range_chance' => 'setRangeChance',
        'tracking_speed_attribute_id' => 'setTrackingSpeedAttributeId',
        'range_attribute_id' => 'setRangeAttributeId',
        'is_assistance' => 'setIsAssistance',
        'electronic_chance' => 'setElectronicChance',
        'disallow_auto_repeat' => 'setDisallowAutoRepeat',
        'effect_category' => 'setEffectCategory',
        'falloff_attribute_id' => 'setFalloffAttributeId',
        'name' => 'setName',
        'is_warp_safe' => 'setIsWarpSafe',
        'effect_id' => 'setEffectId',
        'is_offensive' => 'setIsOffensive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pre_expression' => 'getPreExpression',
        'duration_attribute_id' => 'getDurationAttributeId',
        'description' => 'getDescription',
        'post_expression' => 'getPostExpression',
        'published' => 'getPublished',
        'display_name' => 'getDisplayName',
        'icon_id' => 'getIconId',
        'modifiers' => 'getModifiers',
        'discharge_attribute_id' => 'getDischargeAttributeId',
        'range_chance' => 'getRangeChance',
        'tracking_speed_attribute_id' => 'getTrackingSpeedAttributeId',
        'range_attribute_id' => 'getRangeAttributeId',
        'is_assistance' => 'getIsAssistance',
        'electronic_chance' => 'getElectronicChance',
        'disallow_auto_repeat' => 'getDisallowAutoRepeat',
        'effect_category' => 'getEffectCategory',
        'falloff_attribute_id' => 'getFalloffAttributeId',
        'name' => 'getName',
        'is_warp_safe' => 'getIsWarpSafe',
        'effect_id' => 'getEffectId',
        'is_offensive' => 'getIsOffensive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pre_expression'] = isset($data['pre_expression']) ? $data['pre_expression'] : null;
        $this->container['duration_attribute_id'] = isset($data['duration_attribute_id']) ? $data['duration_attribute_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['post_expression'] = isset($data['post_expression']) ? $data['post_expression'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['icon_id'] = isset($data['icon_id']) ? $data['icon_id'] : null;
        $this->container['modifiers'] = isset($data['modifiers']) ? $data['modifiers'] : null;
        $this->container['discharge_attribute_id'] = isset($data['discharge_attribute_id']) ? $data['discharge_attribute_id'] : null;
        $this->container['range_chance'] = isset($data['range_chance']) ? $data['range_chance'] : null;
        $this->container['tracking_speed_attribute_id'] = isset($data['tracking_speed_attribute_id']) ? $data['tracking_speed_attribute_id'] : null;
        $this->container['range_attribute_id'] = isset($data['range_attribute_id']) ? $data['range_attribute_id'] : null;
        $this->container['is_assistance'] = isset($data['is_assistance']) ? $data['is_assistance'] : null;
        $this->container['electronic_chance'] = isset($data['electronic_chance']) ? $data['electronic_chance'] : null;
        $this->container['disallow_auto_repeat'] = isset($data['disallow_auto_repeat']) ? $data['disallow_auto_repeat'] : null;
        $this->container['effect_category'] = isset($data['effect_category']) ? $data['effect_category'] : null;
        $this->container['falloff_attribute_id'] = isset($data['falloff_attribute_id']) ? $data['falloff_attribute_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_warp_safe'] = isset($data['is_warp_safe']) ? $data['is_warp_safe'] : null;
        $this->container['effect_id'] = isset($data['effect_id']) ? $data['effect_id'] : null;
        $this->container['is_offensive'] = isset($data['is_offensive']) ? $data['is_offensive'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['effect_id'] === null) {
            $invalidProperties[] = "'effect_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pre_expression
     *
     * @return int|null
     */
    public function getPreExpression()
    {
        return $this->container['pre_expression'];
    }

    /**
     * Sets pre_expression
     *
     * @param int|null $pre_expression pre_expression integer
     *
     * @return $this
     */
    public function setPreExpression($pre_expression)
    {
        $this->container['pre_expression'] = $pre_expression;

        return $this;
    }

    /**
     * Gets duration_attribute_id
     *
     * @return int|null
     */
    public function getDurationAttributeId()
    {
        return $this->container['duration_attribute_id'];
    }

    /**
     * Sets duration_attribute_id
     *
     * @param int|null $duration_attribute_id duration_attribute_id integer
     *
     * @return $this
     */
    public function setDurationAttributeId($duration_attribute_id)
    {
        $this->container['duration_attribute_id'] = $duration_attribute_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description string
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets post_expression
     *
     * @return int|null
     */
    public function getPostExpression()
    {
        return $this->container['post_expression'];
    }

    /**
     * Sets post_expression
     *
     * @param int|null $post_expression post_expression integer
     *
     * @return $this
     */
    public function setPostExpression($post_expression)
    {
        $this->container['post_expression'] = $post_expression;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published published boolean
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name string
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets icon_id
     *
     * @return int|null
     */
    public function getIconId()
    {
        return $this->container['icon_id'];
    }

    /**
     * Sets icon_id
     *
     * @param int|null $icon_id icon_id integer
     *
     * @return $this
     */
    public function setIconId($icon_id)
    {
        $this->container['icon_id'] = $icon_id;

        return $this;
    }

    /**
     * Gets modifiers
     *
     * @return \Swagger\Client\Eve\Model\GetDogmaEffectsEffectIdModifier[]|null
     */
    public function getModifiers()
    {
        return $this->container['modifiers'];
    }

    /**
     * Sets modifiers
     *
     * @param \Swagger\Client\Eve\Model\GetDogmaEffectsEffectIdModifier[]|null $modifiers modifiers array
     *
     * @return $this
     */
    public function setModifiers($modifiers)
    {
        $this->container['modifiers'] = $modifiers;

        return $this;
    }

    /**
     * Gets discharge_attribute_id
     *
     * @return int|null
     */
    public function getDischargeAttributeId()
    {
        return $this->container['discharge_attribute_id'];
    }

    /**
     * Sets discharge_attribute_id
     *
     * @param int|null $discharge_attribute_id discharge_attribute_id integer
     *
     * @return $this
     */
    public function setDischargeAttributeId($discharge_attribute_id)
    {
        $this->container['discharge_attribute_id'] = $discharge_attribute_id;

        return $this;
    }

    /**
     * Gets range_chance
     *
     * @return bool|null
     */
    public function getRangeChance()
    {
        return $this->container['range_chance'];
    }

    /**
     * Sets range_chance
     *
     * @param bool|null $range_chance range_chance boolean
     *
     * @return $this
     */
    public function setRangeChance($range_chance)
    {
        $this->container['range_chance'] = $range_chance;

        return $this;
    }

    /**
     * Gets tracking_speed_attribute_id
     *
     * @return int|null
     */
    public function getTrackingSpeedAttributeId()
    {
        return $this->container['tracking_speed_attribute_id'];
    }

    /**
     * Sets tracking_speed_attribute_id
     *
     * @param int|null $tracking_speed_attribute_id tracking_speed_attribute_id integer
     *
     * @return $this
     */
    public function setTrackingSpeedAttributeId($tracking_speed_attribute_id)
    {
        $this->container['tracking_speed_attribute_id'] = $tracking_speed_attribute_id;

        return $this;
    }

    /**
     * Gets range_attribute_id
     *
     * @return int|null
     */
    public function getRangeAttributeId()
    {
        return $this->container['range_attribute_id'];
    }

    /**
     * Sets range_attribute_id
     *
     * @param int|null $range_attribute_id range_attribute_id integer
     *
     * @return $this
     */
    public function setRangeAttributeId($range_attribute_id)
    {
        $this->container['range_attribute_id'] = $range_attribute_id;

        return $this;
    }

    /**
     * Gets is_assistance
     *
     * @return bool|null
     */
    public function getIsAssistance()
    {
        return $this->container['is_assistance'];
    }

    /**
     * Sets is_assistance
     *
     * @param bool|null $is_assistance is_assistance boolean
     *
     * @return $this
     */
    public function setIsAssistance($is_assistance)
    {
        $this->container['is_assistance'] = $is_assistance;

        return $this;
    }

    /**
     * Gets electronic_chance
     *
     * @return bool|null
     */
    public function getElectronicChance()
    {
        return $this->container['electronic_chance'];
    }

    /**
     * Sets electronic_chance
     *
     * @param bool|null $electronic_chance electronic_chance boolean
     *
     * @return $this
     */
    public function setElectronicChance($electronic_chance)
    {
        $this->container['electronic_chance'] = $electronic_chance;

        return $this;
    }

    /**
     * Gets disallow_auto_repeat
     *
     * @return bool|null
     */
    public function getDisallowAutoRepeat()
    {
        return $this->container['disallow_auto_repeat'];
    }

    /**
     * Sets disallow_auto_repeat
     *
     * @param bool|null $disallow_auto_repeat disallow_auto_repeat boolean
     *
     * @return $this
     */
    public function setDisallowAutoRepeat($disallow_auto_repeat)
    {
        $this->container['disallow_auto_repeat'] = $disallow_auto_repeat;

        return $this;
    }

    /**
     * Gets effect_category
     *
     * @return int|null
     */
    public function getEffectCategory()
    {
        return $this->container['effect_category'];
    }

    /**
     * Sets effect_category
     *
     * @param int|null $effect_category effect_category integer
     *
     * @return $this
     */
    public function setEffectCategory($effect_category)
    {
        $this->container['effect_category'] = $effect_category;

        return $this;
    }

    /**
     * Gets falloff_attribute_id
     *
     * @return int|null
     */
    public function getFalloffAttributeId()
    {
        return $this->container['falloff_attribute_id'];
    }

    /**
     * Sets falloff_attribute_id
     *
     * @param int|null $falloff_attribute_id falloff_attribute_id integer
     *
     * @return $this
     */
    public function setFalloffAttributeId($falloff_attribute_id)
    {
        $this->container['falloff_attribute_id'] = $falloff_attribute_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name string
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_warp_safe
     *
     * @return bool|null
     */
    public function getIsWarpSafe()
    {
        return $this->container['is_warp_safe'];
    }

    /**
     * Sets is_warp_safe
     *
     * @param bool|null $is_warp_safe is_warp_safe boolean
     *
     * @return $this
     */
    public function setIsWarpSafe($is_warp_safe)
    {
        $this->container['is_warp_safe'] = $is_warp_safe;

        return $this;
    }

    /**
     * Gets effect_id
     *
     * @return int
     */
    public function getEffectId()
    {
        return $this->container['effect_id'];
    }

    /**
     * Sets effect_id
     *
     * @param int $effect_id effect_id integer
     *
     * @return $this
     */
    public function setEffectId($effect_id)
    {
        $this->container['effect_id'] = $effect_id;

        return $this;
    }

    /**
     * Gets is_offensive
     *
     * @return bool|null
     */
    public function getIsOffensive()
    {
        return $this->container['is_offensive'];
    }

    /**
     * Sets is_offensive
     *
     * @param bool|null $is_offensive is_offensive boolean
     *
     * @return $this
     */
    public function setIsOffensive($is_offensive)
    {
        $this->container['is_offensive'] = $is_offensive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


